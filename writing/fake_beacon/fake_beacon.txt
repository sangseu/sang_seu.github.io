Fake Beacon using nRF24L01
==========================

Mục lục
-------
   Tóm tắt
1. UUID review
2. Công nghệ BTLE
3. So sánh cấu trúc gói tin BTLE và nRF24
4. Mã kiểm tra lỗi CRC
5. Chọn đa thức chia
6. Thuật toán tính mã CRC
7. Mã CRC-24 của BTLE
8. Fake gói tin BTLE

Tóm tắt
-------
Bài viết như một đoạn Note cá nhân ghi chép lại một số kiến thức tổng hợp khi tìm hiểu về công nghệ BTLE. Trong đó có các kiến thức về đặc điểm khung truyền dữ liệu của Beacon, nRF24, kiến thức về mã CRC. Tìm hiểu bản tin Quảng bá của Beacon và tìm cách dùng nRF24 để fake bản tin mà Beacon phát đi.

1. UUID review
--------------
Khi bắt đầu tìm hiểu BLE và ứng dụng Beacon, tôi nhận thấy UUID là đoạn mã rất quan trọng. Đối với các mặt hàng, UUID để nhận diện chúng.
UUDI chính xác là một mã đặc biệt dài 128-bits (16 bytes):

	[5f2d9486-c623-40dc-8577-4f7059ae7ddc]

Định dạng điển hình của UUID là 4-2-2-2-6. Lần lượt, mỗi cặp kí tự là một số trong hệ thập lục phân. Trong ví dụ trên, 5f thực ra là 0x5F.
Để tránh việc truyến 16 byte đôi khi rất lãng phí đối với BLE, Bluetooth SIG đã thông qua một tiêu chuẩn UUID. Tiêu chuẩn này định dạng 96-bits (12 bytes), phần 32-bits còn lại được đặt bởi người dùng:

	[xxxxxxxx-0000-1000-8000-00805F9B34FB]

Ví dụ, mã UUID là 0x180D, chuỗi UUID được gửi đi sẽ là:

	[0000180D-0000-1000-8000-00805F9B34FB]
		 ----

Vấn đề đối với mã UUID là bạn muốn nó là duy nhất. Địa chỉ sau cho phép bạn tạo random mã UUID:
#www.uuidgenerator.net

2. Công nghệ BTLE
-----------------
BTLE là công nghệ khá mới, còn được gọi với tên Bluetooth 4.0. Nó không khác gì công nghệ bluetooth thông dụng ngoài cái tên. BTLE đang hot vì khả năng hoạt động tiết kiệm năng lượng của nó. bluetooth luôn nhảy tần số theo lịch trình chính xác được đồng bộ bằng xung clock trong khi BTLE  thực hiện nhảy tần số sau khi mỗi gói tin được gửi đi, vì vậy không cần duy trì một xung clock để kiểm soát lịch trình nhảy tần số. Thực tế, BTLE cho phép một thiết bị tắt hoàn toàn module phát Radio trong thời gian nghỉ mà vẫn duy trì kết nối. Điều này làm cho nó tiết kiệm năng lượng tới mức tuyệt vời cho các ứng dụng như chuột, bàn phím không dây, Beacon...Một tính năng cool của BTLE nữa là các thiết bị có thể gửi các bản tin Boadcast nhỏ. Không giống với bluetooth thật sự, bạn không cần kết nối và “pair” với thiết bị BTLE, bạn chỉ cần lắng nghe đúng kênh và nhận được tất cả các bản tin quảng cáo.

Chế độ nhảy kênh đơn giản của BTLE cho tôi thấy hướng có thể Fake bản tin mà một thiết bị BTLE phát đi. Vẫn là giải tần số 2.4GHz, mỗi kênh có dải thông là 1MHz, điều chế GFSK, datarate là 1Mbps, mã bắt đầu là 10101010 hoặc 01010101, 32-bits địa chỉ. nRF24L01 là một module thông dụng và có vẻ đáp ứng đầy đủ điều kiện rồi. Tuy nhiên, chúng ta cùng so sánh để thấy được BTLE cần những gì đặc biệt hơn và nRF24L01 có những gì.

	* CRC: BTLE dùng mã CRC 24-bits trong khi nRF24L01 dùng CRC 16-bits đối với gói tin ShockBust. May mắn là nRF24 cho phép chúng ra vô hiệu hóa CRC, và chúng ta có thể tự tạo ra mã CRC và gói nó kèm bản tin.

	* Nhảy tần số: BTLE cần 150 us hoặc ngắn hơn để nhảy tần số. nRF24 không đáp ứng kịp khoảng thời gian này, tuy nhiên đó không phải vấn đề lớn, bản tin quảng cáo của chúng ta có thể phát với chu kì dài hơn.

	* Kích thước gói tin: Các gói BTLE có nhiều định dạng kích thước khác nhau, lên đến 39 bytes. Các gói tin hỗ trợ thiết lập kết nối CONNECT_REG gồm 34-bytes payload + 3-bytes CRC, tức là bản tin dài 37-bytes. Đáng buồn là nRF24 chỉ xử lí các gói tin 32-bytes trở xuống.

3. So sánh cấu trúc gói tin BTLE và nRF24
-----------------------------------------
Hình 1: Cấu trúc gói tin quảng cáo của BTLE

Bản tin quảng cáo của BTLE được tạo bởi các phần:
* 1 byte mở đầu (10101010 hoặc 01010101)
* 4-bytes địa chỉ truy cập mà luôn luôn là 0x8E89BED6 cho các bản tin quảng
cáo
* Phần Header:
	* 1-byte đầu tiên của Header trong đó xác định kiểu bản tin quảng cáo,
kiểu RX, TX
	* Byte tiếp theo xác định độ dài còn lại của payload không bao gồm các
byte CRC
* Phần tiếp theo là dữ liệu.
* Phần mã CRC: 3-bytes cuối dùng là mã CRC 24-bits checksum của phần payload trước nó.

Hình 2: Cấu trúc gói tin nRF24 ShockBurst(TM)

nRF24 có hai cấu trúc gói tin khác nhau: ShockBurst và Enhanced ShockBurst. Tôi sẽ sử dụng format ShockBurst vì cấu trúc gói tin Enhanced ShockBurst có 9-bits kiểm soát gói tin ngăn cách giữa các bytes địa chỉ và payload làm cho việc Fake gói tin BTLE trở nên khó khăn hơn. Gói tin nRF24 khá tương đồng với gói tin quảng cáo của BTLE, chúng ta sẽ vô hiệu hóa CRC như lí do đã nói ở trên. Gói tin nRF không yêu cầu data whitening ?(Thuật ngữ data whitening cần được tìm hiểu thêm. Yêu cầu data whitening đối với phương thức truyền tin không dây nhằm phân biệt dữ liệu zero với trạng thái mất kết nối/không truyền tin ). Thêm một lưu ý nữa là mỗi phần gói tin, nRF24L01 truyền byte cao trước và tương ứng truyền các bit cao trước. BTLE ngược lại, truyền byte thấp trước và tương ứng truyền bit cao trong mỗi byte trước. Vì vậy, ta cần thực hiện swapbit trước khi gửi dữ liệu đi.

4. Mã kiểm tra lỗi CRC
----------------------
Truyền tin nói chung không thể tránh khỏi các loại nhiễu và rủi ro làm dữ liệu nhận được ở bên nhận không được trọn vẹn. Có hai cách khắc phục khi xảy ra lỗi là sửa lỗi và báo lỗi bằng cách phản hồi. Phương án sửa lỗi thực hiện bằng cách thêm vào frame truyền đi một vài mã có thể xem là dữ liệu được mã hóa. Bên nhận kiểm tra bản tin, nếu phát hiện có lỗi có thể phục hồi lại dữ liệu. Phương án báo lỗi sẽ thêm các thông tin đặc trưng của dữ liệu vào frame truyền đi. Bên nhận so sánh đặc trưng dữ liệu nhận được và so sánh với thông tin kèm theo, nếu không trùng khớp sẽ hủy bản tin và có thể đưa ra yêu cầu gửi lại.
Cyclic Redundancy Check (CRC) là một cơ chế phát hiện lỗi.
Nguyên lý:
-D: data k-bits
-F: FCS (Frame Check Sequency) n-bits
-T: frame truyền đi k+n-bits
-P: đa thức chia n+1-bits
(Chú ý: Phép chia nhị phân nếu có số dư thì luôn ít hơn số chia 1 bit)
Bản tin truyền đi gồm có:

T=(2^n)*D + F

Tức là dữ liệu+mã FCS
Giả sử (2^n)*D chia cho đa thức chia P, được thương là Q và số dư là R

(2^n)*D			R
-------- = Q + ---
   P			P

Nếu ta lấy F=R thì T cũng chia hết cho P. Điều đó có nghĩa là khi hai bên thống nhất với nhau một đa thức chia, bên truyền truyền đi frame gồm dữ liệu kèm mã FCS, bên nhận đem frame nhận được chia cho đa thức chia, nếu chia hết tức là dữ liệu đúng, ngược lại là dữ liệu bị sai.

*Ví dụ CRC dùng phép toán nhị phân
Dữ liệu cần truyền-Số bị chia: 1101011011
Đa thức chia-Số chia: 10011 5-bits, tức là mã FCS sẽ có độ dài 4-bits
Ta dịch dữ liệu sang trái 4-bits rồi thực hiện phép chia.

            1100001010 ~ Thương
       _______________
10011 ) 11010110110000 ~ Dữ liệu dịch trái 4-bits
        10011,,.,,....
        -----,,.,,....
         10011,.,,....
         10011,.,,....
         -----,.,,....
          00001.,,....
          00000.,,....
          -----.,,....
           00010,,....
           00000,,....
           -----,,....
            00101,....
            00000,....
            -----,....
             01011....
             00000....
             -----....
              10110...
              10011...
              -----...
               01010..
               00000..
               -----..
                10100.
                10011.
                -----.
                 01110
                 00000
                 -----
                  1110 ~ Số dư
Ta có mã FCS là 1110.

Lưu ý: Trong tính toán nhị phân, phép cộng giống phép trừ và còn được thao tác dễ hiểu hơn là phép XOR.
Phép cộng
		10011011
       +11001010
        --------
        01010001
Phép trừ
		10011011
       -11001010
        --------
        01010001
Phép XOR
		10011011
    XOR 11001010
        --------
        01010001

5. Chọn đa thức chia
--------------------
Như đã trình bày nguyên lý tạo ra mã kiểm tra lỗi CRC. Bên truyền và bên nhận cần quy định chung một đa thức chia. Một cách ngắn gọn, bên truyền truyền đi D+R, bên nhận đem D+R chia cho P, nếu dư 0 tức là bản tin đúng. Khả năng kiểm tra lỗi sẽ phụ thuộc vào P mà chúng ta chọn lựa, tất nhiên trong trường hợp R cũng bị sai thì ta không thể phát hiện được.

Ta thấy, để CRC hoạt động được cần có khối lượng tính toán đáng kể tùy thuộc vào độ dài và độ phức tạp của đa thức P. Trong khi không phải bộ vi xử lí nào cũng đảm nhiệm được khối lượng tính toán lớn, nhiều thuật toán và tiêu chuẩn đã ra đời nhằm tìm ra đã thức P đem lại hiệu suất tốt hơn như CRC-5-USB, CRC-8-ATM, CRC-32-IEEE 802.3... Tuy nhiên có quá nhiều chuẩn và các thuật toán tinh vi mà tôi chưa đủ khả năng tìm hiểu nên tạm gác phần này ở đây.

6. Thuật toán tính mã CRC
-------------------------
Phần này sẽ tìm hiểu tìm hiểu các "thủ thuật" tính toán nhanh gọn hơn mà không phải theo cách "cơ bắp" như phần trước, tức là lần lượt thực hiện theo nguyên lý.

Để thực hiện thuật toán CRC, tất cả những gì chúng ta cần làm là thực hiện phép chia. Lí do tại sao ta cần tìm hiểu các thủ thuật vì thứ nhất, dữ liệu ta đang làm việc là dữ diệu nhị phân, thứ hai, dữ liệu có thể lên đến hàng mega byte và các bộ vi xử lí thông dụng ngày nay không có thanh ghi đủ lớn để thực hiện phép chia.

Sau đây, chúng ta sẽ thực hiện thuật toán với các thanh ghi 8-bits và xử lí dữ liệu theo từng byte. Chúng ta cùng xem xét bài toán cơ bản có mã FCS với W=4, đa thức chia = 10111 và thanh ghi 4-bits.

                  3   2   1   0   Bits
                +---+---+---+---+
       Out  <-- |   |   |   |   | <----- Dữ liệu đã dịch W-bits
                +---+---+---+---+

             1    0   1   1   1   = Đa thức chia P

Hãy quan sát cách làm "cơ bắp" đã trình bày ở mục [4], ta chú ý đến các phép XOR. Đó là các phép XOR giữa kết quả của phép XOR trước với P. Như vậy, ta có thể đưa kết quả phép XOR vào thanh ghi và thực hiện vòng lặp:

#==========
While (Dữ liệu)
	R=R XOR P
	Dịch dữ liệu vào thanh ghi thêm 1 bit
#==========

Để ý đến phép XOR, kết quả chỉ thay đổi khi thanh ghi R tham gia vào phép XOR có bit đầu tiên là 1, khi thanh ghi R có bit đầu tiên là 0 thì kết quả XOR không đổi. Chúng ta có vòng lặp tối ưu hơn:

#==========
	Load thanh ghi R bằng các bit 0
	Dịch dữ liệu sang trái W-bits và chèn các bit 0 vào cuối
	While (Dữ liệu load vào R)
		Begin
		Dịch thanh ghi R sang trái 1 bit, load 1 bit dữ liệu vào bit 0 của thanh ghi
		If (Nếu 1 bit Out khỏi thanh ghi R)
			R = R XOR P
		End
	Mã FCS = R
#==========

Ví dụ trên là cách làm "cơ bắp" thực hiện trên vi xử lí, nó tương đương với nguyên lý đã trình bày ở trên, nó hoạt động ở cấp độ bit nên khá vụng về và chưa hiệu quả. Thực tế là dữ liệu có n bit, ta cần thực hiện n vòng lặp tương ứng.Ta cần tăng tốc thuật toán lên xử lí dữ liệu nhanh hơn theo đơn vị byte như 8-bits, 16-bits, 32-bits hoặc hơn nữa nếu có thể. Trong ví dụ sau, ta sẽ làm việc với mã FCS 32-bits (W=32).

                   3    2    1    0   Bytes
                +----+----+----+----+
       Out  <-- |    |    |    |    | <----- Dữ liệu đã dịch W-bits
                +----+----+----+----+

               1<------32 bits------> = P

Như đã lưu ý, khi R có bit đầu tiên bằng 1 thì phép XOR mới có tác dụng.
Vẫn như thuật toán cơ bản ở trên, hãy hình dung 8-bits đầu tiên của thanh ghi 32-bits có giá trị:

	t7 t6 t5 t4 t3 t2 t1 t0

Trong vòng lặp tiếp theo của thuật toán, t7 sẽ quyết định khi nào P được XOR với thanh ghi R. Nếu t7=1, phép XOR sẽ cho kết quả, nếu không phép XOR không cần thực hiện. Gọi 8-bits đầu của R là:

	g7 g6 g5 g4 g3 g2 g1 g0

Ở vòng lặp tiếp theo, byte đầu tiên của thanh ghi sẽ là:

		t6 t5 t4 t3 t2 t1 t0 ??
+ t7 * (g7 g6 g5 g4 g3 g2 g1 g0)	[Nhớ là phép "+" tương ứng với phép XOR]

Bit đầu tiên bây giờ là t6 + t7*g7, nó sẽ lại quyết định ở vòng lặp tiếp theo, phép XOR có cần thực hiện không. Tương tự, sự kiện ở vong lặp tiếp theo lại phụ thuộc vào 3 bit đầu tiên t7, t6 và t5. Từ sự ràng buộc đó, ta rút ra được rằng: giá trị bit đầu tiên của thanh ghi R trong k vòng lặp được tính toán từ k bits đầu tiên của thanh ghi R.

Ta xem xét 8 bits đầu của thanh ghi R, từ đó ta tính toán các bit đầu tiên của thanh ghi trong 8 vòng lặp tiếp theo. Giả sử chúng ta thực hiện 8 vòng lặp tiếp theo sử dụng giá trị đã tính toán trước đó, ta cần lưu ý 3 điều:

	* P được XOR với 8 bits đầu tiên của thanh ghi, sau đó nó bị đẩy ra khỏi thanh ghi.

	* Các bit còn lại của thanh ghi sẽ dịch sang trái và byte cuối cùng bên phải của thanh ghi R sẽ được load thêm byte tiếp theo

	VÀ

	* Trong khi những điều đó diễn ra, một chuỗi các phép XOR theo bit được thực hiện để tính toán byte quyết định cho các vòng lặp tiếp theo

Bây giờ, ta xét ảnh hưởng của phép XOR với hằng số ở các offset khác nhau đến thanh ghi. Ví dụ:

       0100010  Thanh ghi
       ...0110  XOR
       ..0110.  XOR
       0110...  XOR
       -------
       0011000
       -------

Điều rút ra ở đây là bạn có thể XOR thanh ghi R từng bước với hằng số 0110 hoặc XOR tất cả các bước với nhau rồi đem XOR với thanh ghi đều cho một kết quả như nhau. Điều này liên tưởng đến bài toán của chúng ta rằng từ kết quả tính toán byte quyết định vòng lặp, ta lấy tổng P tại các offset tương ứng rồi lấy XOR với thanh ghi là ra được kết quả mong muốn. Thuật toán lúc này sẽ như sau:

#==========
While (Dữ liệu load vào R)
	Begin
	Xét byte đầu tiên của thanh ghi R
	Tính byte quyết định từ byte đầu tiên của thanh ghi R
	Lấy tổng tất cả các giá trị P tại các offset quy định bởi byte quyết định
	Dịch thanh ghi R sang trái 1 byte và load byte tiếp theo
	XOR tổng các giá trị P ở trên với thanh ghi R
	End
#==========

Thuật toán này chưa phải tốt hơn nhiều so với thuật toán cơ bản, nhưng nó chỉ ra rằng, hầu hết các thao tác tính toán này có thể được tính toán trước và tổng hợp vào một bảng quyết định. Kết quả là, thuật toán trên có thể được đơn giản hóa:

#==========
   While (Dữ liệu load vào R)
      Begin
      Top = top_byte(R);
      R = (R << 24) | next_byte;
      R = R XOR precomputed_table[Top];
      End
#==========

Bạn hiểu vấn đề chứ ? Tôi muốn nhấn mạnh đến bảng quyết định, đó là vấn đề cốt lõi của thuật toán CRC. Với bảng quyết định này, ta chỉ cần phép dịch, phép OR và phép XOR để thực hiện một thuật toán rất hiệu quả.
Hình dung cách chạy thuật toán sẽ như sau:

                   3    2    1    0   Bytes
                +----+----+----+----+
         +-----<|    |    |    |    | <----- Dữ liệu đã dịch W-bits
         |      +----+----+----+----+
         |                ^
         |                |
         |               XOR
         |                |
         |     0+----+----+----+----+       Thuật toán
         v      +----+----+----+----+       ----------
         |      +----+----+----+----+       1. Dịch thanh ghi sang trái
         |      +----+----+----+----+          1 byte, load byte tiếp theo
         |      +----+----+----+----+          vào thanh ghi.
         |      +----+----+----+----+       2. Dùng byte vừa Out khỏi thanh
         |      +----+----+----+----+          ghi để tra cứu vào số liệu
         +----->+----+----+----+----+          trong bảng quyết định.
                +----+----+----+----+       3. XOR giá trị trong bảng với
                +----+----+----+----+          thanh ghi R.
                +----+----+----+----+       4. Goto 1 nếu dữ liệu tiếp tục
                +----+----+----+----+          được load vào R.
             255+----+----+----+----+

Trong C, vòng lặp thuật toán sẽ như sau:

#==========
	r=0;
	while (len--)
		{
		byte t = (r >> 24) & 0xFF; /* Lấy byte đầu tiên của thanh ghi để
tra cứu vào số liệu trong bảng quyết định */
		r = (r << 8) | *p++;
		r^=table[t];
		}
#==========

Trong đó:
len: độ dài của dữ liệu đã dịch W-bits, đơn bị là byte
p: con trỏ trỏ đến dữ liệu đã dịch W-bits
r: thanh ghi
t: biến trung gian
table: bảng quyết định
Code này có thể viết như sau:

   r=0; while (len--) r = ((r << 8) | *p++) ^ t[(r >> 24) & 0xFF];

Vòng lặp hiệu quả và trông rất gọn, mặc dù nó không rành mạch lắm đối với
người không thành thạo trong lý thuyết CRC. Chúng ta sẽ gọi nó là
thuật toán bảng.

Nhưng hãy nhìn lại vòng lặp ở trên, dữ liệu trước khi đưa vào vòng lặp được thêm vào W/8 Zero bytes vào phía cuối. Nếu dữ liệu của chúng ta có kích thước nhỏ, có thể kiểm soát được thì Zero bytes không phải là vấn đề. Nhưng trong các trường hợp thuật toán được sử dụng bởi Code khác, người ta lại lưu tâm đến vấn đề này. Từ mã code cơ bản trên, người ta tìm cách tính toán được mã CRC mà không cần thêm vào các Zero bytes vào cuối dữ liệu. Phần tìm hiểu này tôi chưa đi sâu vào nhưng sẽ quay lại khi có điều kiện.

7. Mã CRC-24 của BTLE
---------------------
BTLE dùng mã kiểm tra lỗi đường truyền CRC-24-bits. Như đã trình bày ở trên,
ta sẽ vô hiệu hóa chức năng thêm mã CRC-16-bits vào bản tin và ta sẽ tính
toán mã CRC-24-bits "bằng tay" để thêm vào bản tin fake Beacon.
Đa thức chia P dùng tính mã CRC-24 ở đây là
x^24 + x^10 + x^9 + x^6 + x^4 + x^3 + x + 1.
Trong hệ cơ số thập lục phân P là 0x065B.
Mã CRC-24 tương đương với 3 bytes được tính toán theo cách bài toán cơ bản đã trình bày ở trên.

Theo tài liệu Core Specification version 4.0 - Bluetooth/Volume 6/Part B
/3.1.1 
Quy định thanh ghi tính mã CRC được khởi tạo sẵn giá trị 0x555555.
Vòng lặp thuật toán như sau:

	1) Khởi tạo CRC.

	2) if bit cao đầu tiên của CRC bằng 1, dịch 1 bit tiếp theo của bản tin và
XOR CRC với P; ngược lại, chỉ dịch 1 bit tiếp theo của bản tin.

	3) Lặp lại bước 2 đến khi toàn bộ bản tin được xử lý.
Trong C, không khó để tính toán BTLE CRC, mã code như sau:
#==========
	void btLeCrc(const uint8_t* data, uint8_t len, uint8_t* dst){

    	uint8_t v, t, d;
    
    	while(len--){ 
	       	d = *data++;
    	    for(v = 0; v < 8; v++, d >>= 1){
				//Lưu bit 23 CRC, kiểm tra và dịch trái thanh ghi R
    	        t = dst[0] >> 7;				dst[0] <<= 1;
    	        if(dst[1] & 0x80) dst[0] |= 1;	dst[1] <<= 1;
    	        if(dst[2] & 0x80) dst[1] |= 1;  dst[2] <<= 1;

				//Nếu bit 23 CRC bằng 1, tiến hành XOR thanh ghi với P
    	        if(t != (d & 1)){
    	          dst[2] ^= 0x5B; // x^6 + x^4 + x^3 + x + 1
    	          dst[1] ^= 0x06; // x^10 + x^9
    	        }
    	    } 
		}
	}
#==========

8. Fake gói tin BTLE
--------------------
Ở đây, tôi muốn hướng tới ứng dụng Beacon. Các bản tin quảng cáo của BTLE khá linh hoạt, với 32-bytes mà nRF24 có, ta có thể dùng 3-bytes cho CRC, 2 bytes cho ADV_NONCONN_IND packet header, 6 bytes cho địa chỉ MAC, và ta còn 21 bytes cho payload. Tuy nhiên, payload này vẫn có cấu trúc riêng. Trường hợp tối thiểu hóa, ta còn 19 bytes dữ liệu nếu chúng ta không muốn thiết bị truyền đi với một cái tên.
Ta sẽ tiến hành gửi payload với tên thiết bị và dữ liệu demo.
Hình 3: Advertising payload format


Tôi sử dụng 3 Struture là Flag (đặc trưng cho LE), tên thiết bị, dữ liệu. Mỗi Struture có cấu tạo gồm

+--------+---------+---------+
| Length | AD Type | AD data |
+--------+---------+---------+

Bạn có thể xem danh sách đầy đủ AD Type ở đây
https://www.bluetooth.org/en-us/specification/assigned-numbers/generic-access-profile

Payload được ghi đi sẽ là:

	2		// Độ dài Struture Flag
	0x01	// AD type <<Flags>>
	0x05	// Limited discovery mode
	6		// Độ dài Struture tên thiết bị
	0x08;	// AD type <<Shortened Local Name>>
	'n'
	'R'
	'F'
	'2'
	'4'
	3   	// Độ dài Struture dữ liệu
	0xff	// AD Type <<Manufacturer Specific Data>>
	0x01	// some test data
	0x02	// some test data

Qua những phân tích từ các phần trước, chúng ta gói ghém các thành phần lại và demo chương trình dùng nRF24l01+ Fake bản tin Beacon.

https://github.com/lijunxyz/nRF24_BLE/blob/master/Arduino/nRF24_BLE_advertizer_demo/nRF24_BLE_advertizer_demo.ino

Các bạn đọc bài viết http://ram.lijun.li/misc-nrf24-ble.html và làm theo hướng dẫn.

/* Hình Demo sẽ cập nhật sau*/

Mọi thắc mắc xin để lại Comment, chúng ta sẽ cùng giải quyết.

Nguồn:
http://ram.lijun.li/misc-nrf24-ble.html
https://devzone.nordicsemi.com/blogs/782/bluetooth-smart-and-the-nordics-softdevices-part-1/
http://www.argenox.com/bluetooth-low-energy-ble-v4-0-development/library/a-ble-advertising-primer/
https://www.bluetooth.org/en-us/specification/assigned-numbers/generic-access-profile
http://makernews.info/featured/2015/09/BLE-nrf24l01-arduino.html

